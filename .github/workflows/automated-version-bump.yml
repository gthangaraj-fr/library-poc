name: Automated Version Bump and Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  create-version-pr:
    name: Create Version Bump PR
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git config --local url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create feature branch
        id: branch
        run: |
          BRANCH_NAME="version-bump-$(date +'%Y%m%d-%H%M%S')"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version_bump
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from ${{ steps.current_version.outputs.version }} to $NEW_VERSION"

      - name: Generate changes summary
        id: changes
        run: |
          # Get commits since last tag for release notes
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" --no-merges | head -10)
            RELEASE_TYPE="🎉 Initial Release"
          else
            CHANGES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -10)
            RELEASE_TYPE="📦 Update"
          fi

          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "release_type<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}

          Version: ${{ steps.current_version.outputs.version }} → ${{ steps.version_bump.outputs.new_version }}
          Type: ${{ github.event.inputs.version_type }}

          🚀 Ready for automated publish after merge"

      - name: Push feature branch
        run: git push origin ${{ steps.branch.outputs.branch_name }}

      - name: Create Pull Request
        run: |
          PR_URL=$(gh pr create 
            --title "🚀 Version Bump to ${{ steps.version_bump.outputs.new_version }}" 
            --body "## Automated Version Bump: ${{ steps.version_bump.outputs.new_version }}

          ### 📦 Changes:
          - **Version**: ${{ steps.current_version.outputs.version }} → ${{ steps.version_bump.outputs.new_version }}
          - **Type**: ${{ github.event.inputs.version_type }}
          - **Build**: ✅ Verified successful

          ### 📋 Recent commits:
          ${{ steps.changes.outputs.changes }}

          ### 🚀 After Merge - Automatic Actions:
          - ✅ npm package published 
          - 🏷️ Git tag created  
          - 📋 GitHub release created

          **⚡ Merge this PR to trigger automated publishing!**" 
            --head ${{ steps.branch.outputs.branch_name }} 
            --base main)

          echo "✅ Pull request created: $PR_URL"
          echo "🔗 Review and merge to complete: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait and Auto-merge PR
        run: |
          # Get PR number from URL
          PR_NUMBER=$(echo "${{ steps.create_pr.outputs.pr_url }}" | grep -o '[0-9]*$')

          echo "� Waiting 30 seconds before auto-merge..."
          sleep 30

          # Try to merge the PR
          echo "🔄 Attempting to auto-merge PR #$PR_NUMBER..."

          # First try auto-merge (respects branch protection)
          if gh pr merge $PR_NUMBER --auto --squash --delete-branch; then
            echo "✅ Auto-merge enabled! PR will merge automatically when checks pass."
          else
            echo "⚠️ Auto-merge failed, trying direct merge..."
            # If auto-merge fails, try direct merge (requires admin bypass)
            if gh pr merge $PR_NUMBER --squash --delete-branch; then
              echo "✅ PR merged successfully!"
            else
              echo "❌ Auto-merge failed. Manual merge required."
              echo "🔗 Please merge manually: ${{ steps.create_pr.outputs.pr_url }}"
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-after-merge:
    name: Publish After PR Merge
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if this is a version bump commit
        id: check_version
        run: |
          if git log -1 --pretty=%s | grep -q "chore: bump version to"; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
            VERSION=$(node -p "require('./package.json').version")
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            echo "✅ Version bump detected: $VERSION"
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Not a version bump commit, skipping publish"
          fi

      - name: Setup Node.js
        if: steps.check_version.outputs.is_version_bump == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies and build
        if: steps.check_version.outputs.is_version_bump == 'true'
        run: |
          npm ci
          npm run build

      - name: Publish to npm
        if: steps.check_version.outputs.is_version_bump == 'true'
        run: |
          echo "Publishing to npm..."
          npm publish --access public
          echo "✅ Successfully published to npm!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        if: steps.check_version.outputs.is_version_bump == 'true'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git tag ${{ steps.check_version.outputs.version }}
          git push origin ${{ steps.check_version.outputs.version }}
          echo "✅ Git tag created and pushed!"

      - name: Generate release notes
        if: steps.check_version.outputs.is_version_bump == 'true'
        id: release_notes
        run: |
          # Get commits since last tag (excluding current)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" --no-merges HEAD^)
            RELEASE_TYPE="🎉 Initial Release"
          else
            CHANGES=$(git log $LAST_TAG..HEAD^ --pretty=format:"- %s" --no-merges)
            RELEASE_TYPE="📦 Update"
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## $RELEASE_TYPE

          ### 📋 Changes in this version:
          $CHANGES

          ### 📦 Installation:
          \`\`\`bash
          npm install @gthangaraj-fr/react-button-library@${{ steps.check_version.outputs.version }}
          \`\`\`

          ### 🔗 Links:
          - [npm Package](https://www.npmjs.com/package/@gthangaraj-fr/react-button-library)
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)

          ---
          *This release was automatically generated by GitHub Actions*
          EOF

      - name: Create GitHub Release
        if: steps.check_version.outputs.is_version_bump == 'true'
        run: |
          gh release create ${{ steps.check_version.outputs.version }} \
            --title "Release ${{ steps.check_version.outputs.version }}" \
            --notes-file release_notes.md \
            --latest
          echo "✅ GitHub release created!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
